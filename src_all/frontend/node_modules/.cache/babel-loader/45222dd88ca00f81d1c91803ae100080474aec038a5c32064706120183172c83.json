{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, renderList as _renderList, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-271bca0e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"route-planner\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"路线规划\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"walk\"\n}, \"步行\", -1 /* HOISTED */));\nconst _hoisted_6 = {\n  key: 0,\n  value: \"ebike\"\n};\nconst _hoisted_7 = {\n  key: 1,\n  value: \"bike\"\n};\nconst _hoisted_8 = [\"onUpdate:modelValue\"];\nconst _hoisted_9 = {\n  key: 1,\n  class: \"error\"\n};\nconst _hoisted_10 = {\n  key: 2,\n  class: \"route-info\"\n};\nconst _hoisted_11 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"路线信息:\", -1 /* HOISTED */));\nconst _hoisted_12 = [\"innerHTML\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.goToDashboard && $setup.goToDashboard(...args))\n  }, \"返回首页\"), _createCommentVNode(\" 选择景区或校园 \"), _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $setup.selectArea('scenic'))\n  }, \"景区\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $setup.selectArea('campus'))\n  }, \"校园\")]), _createCommentVNode(\" 根据选择显示不同的输入框 \"), _createCommentVNode(\" 切换点对点和多途径点 \"), $setup.currentArea ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"h2\", null, _toDisplayString($setup.currentArea === 'scenic' ? '景区路线规划' : '校园路线规划'), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $setup.toggleRouteType && $setup.toggleRouteType(...args))\n  }, \"切换到\" + _toDisplayString($setup.routeType === 'pointToPoint' ? '多途径点' : '点对点'), 1 /* TEXT */), _createCommentVNode(\" 点对点路线规划 \"), $setup.routeType === 'pointToPoint' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.startPoint = $event),\n    placeholder: \"起点\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.startPoint]]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $setup.endPoint = $event),\n    placeholder: \"终点\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.endPoint]]), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $setup.transport = $event)\n  }, [_hoisted_5, _createCommentVNode(\"景区特有的电动车\"), $setup.currentArea === 'scenic' ? (_openBlock(), _createElementBlock(\"option\", _hoisted_6, \"电动车\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 校园的交通工具选项 \"), $setup.currentArea === 'campus' ? (_openBlock(), _createElementBlock(\"option\", _hoisted_7, \"自行车\")) : _createCommentVNode(\"v-if\", true)], 512 /* NEED_PATCH */), [[_vModelSelect, $setup.transport]]), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $setup.searchRoute && $setup.searchRoute(...args))\n  }, \"搜索\")])) : (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 多途径点路线规划 \"), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => $setup.currentLocation = $event),\n    placeholder: \"当前位置\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.currentLocation]]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.viaPoints, (point, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      \"onUpdate:modelValue\": $event => $setup.viaPoints[index] = $event,\n      placeholder: \"途径点\"\n    }, null, 8 /* PROPS */, _hoisted_8), [[_vModelText, $setup.viaPoints[index]]])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: _cache[9] || (_cache[9] = (...args) => $setup.addViaPoint && $setup.addViaPoint(...args))\n  }, \"添加途径点\"), _createElementVNode(\"button\", {\n    onClick: _cache[10] || (_cache[10] = (...args) => $setup.searchRoute && $setup.searchRoute(...args))\n  }, \"搜索\")])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), $setup.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, _toDisplayString($setup.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $setup.routeInfo ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_hoisted_11, _createCommentVNode(\" 使用 v-html 来渲染HTML实体 \"), _createElementVNode(\"div\", {\n    innerHTML: $setup.routeInfo\n  }, null, 8 /* PROPS */, _hoisted_12)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","value","_createElementBlock","_hoisted_1","_hoisted_2","onClick","_cache","args","$setup","goToDashboard","_createCommentVNode","$event","selectArea","currentArea","_hoisted_3","_toDisplayString","toggleRouteType","routeType","_hoisted_4","startPoint","placeholder","endPoint","transport","_hoisted_5","_hoisted_6","_hoisted_7","searchRoute","_Fragment","currentLocation","_renderList","viaPoints","point","index","_hoisted_8","addViaPoint","error","_hoisted_9","routeInfo","_hoisted_10","_hoisted_11","innerHTML","_hoisted_12"],"sources":["D:\\Users\\SevenGrass\\Documents\\WILLIAMZHANG\\DataStrucCourseDes\\MyGithub\\src_all\\frontend\\src\\components\\RoutePlanner.vue"],"sourcesContent":["<!-- RoutePlanner.vue -->\r\n<template>\r\n  <div class=\"route-planner\">\r\n    <h1>路线规划</h1>\r\n    <button @click=\"goToDashboard\">返回首页</button>\r\n    <!-- 选择景区或校园 -->\r\n    <div>\r\n      <button @click=\"selectArea('scenic')\">景区</button>\r\n      <button @click=\"selectArea('campus')\">校园</button>\r\n    </div>\r\n    <!-- 根据选择显示不同的输入框 -->\r\n    <!-- 切换点对点和多途径点 -->\r\n    <div v-if=\"currentArea\">\r\n      <h2>{{ currentArea === 'scenic' ? '景区路线规划' : '校园路线规划' }}</h2>\r\n      <button @click=\"toggleRouteType\">切换到{{ routeType === 'pointToPoint' ? '多途径点' : '点对点' }}</button>\r\n      <!-- 点对点路线规划 -->\r\n      <div v-if=\"routeType === 'pointToPoint'\">\r\n        <input v-model=\"startPoint\" placeholder=\"起点\">\r\n        <input v-model=\"endPoint\" placeholder=\"终点\">\r\n        <select v-model=\"transport\">\r\n          <option value=\"walk\">步行</option>\r\n          <!--景区特有的电动车-->\r\n          <option v-if=\"currentArea === 'scenic'\" value=\"ebike\">电动车</option>\r\n          <!-- 校园的交通工具选项 -->\r\n          <option v-if=\"currentArea === 'campus'\" value=\"bike\">自行车</option>\r\n        </select>\r\n        <button @click=\"searchRoute\">搜索</button>\r\n      </div>\r\n      <!-- 多途径点路线规划 -->\r\n      <div v-else>\r\n        <input v-model=\"currentLocation\" placeholder=\"当前位置\">\r\n        <div v-for=\"(point, index) in viaPoints\" :key=\"index\">\r\n          <input v-model=\"viaPoints[index]\" placeholder=\"途径点\">\r\n        </div>\r\n        <button @click=\"addViaPoint\">添加途径点</button>\r\n        <button @click=\"searchRoute\">搜索</button>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"error\" class=\"error\">{{ error }}</div>\r\n    <div v-if=\"routeInfo\" class=\"route-info\">\r\n      <h3>路线信息:</h3>\r\n      <!-- 使用 v-html 来渲染HTML实体 -->\r\n      <div v-html=\"routeInfo\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport { useRouter } from 'vue-router';\r\n\r\nexport default {\r\n  name: 'RoutePlanner',\r\n  setup() {\r\n    const currentArea = ref('scenic');\r\n    const routeType = ref('pointToPoint'); // 默认为点对点路线规划\r\n    const startPoint = ref('');\r\n    const endPoint = ref('');\r\n    const currentLocation = ref('');\r\n    const viaPoints = ref(['']);\r\n    const transport = ref('walk');\r\n    const error = ref('');\r\n    const routeInfo = ref('');\r\n    const router = useRouter();\r\n\r\n    // 从路由获取查询参数\r\n    const { query } = router.currentRoute.value;\r\n\r\n    // 新增重置字段的函数\r\n    const resetFields = () => {\r\n      startPoint.value = '';\r\n      endPoint.value = '';\r\n      currentLocation.value = '';\r\n      viaPoints.value = ['']; // 重置途径点列表\r\n      transport.value = 'walk'; // 重置交通工具\r\n      error.value = ''; // 清除错误信息\r\n      routeInfo.value = ''; // 清除路线信息\r\n    };\r\n\r\n    //onMounted(resetFields); // 组件挂载时重置字段\r\n\r\n    onMounted(() => {\r\n      // 组件挂载时重置字段\r\n      resetFields();\r\n\r\n      // 设置起点和终点\r\n      if (query.startPoint && query.endPoint) {\r\n        startPoint.value = query.startPoint;\r\n        endPoint.value = query.endPoint;\r\n      }\r\n    });\r\n\r\n    const toggleRouteType = () => {\r\n      resetFields(); // 添加重置字段操作\r\n      routeType.value = routeType.value === 'pointToPoint' ? 'multipleWaypoints' : 'pointToPoint';\r\n    };\r\n\r\n    const selectArea = (area) => {\r\n      resetFields(); // 添加重置字段操作\r\n      currentArea.value = area;\r\n      //routeType.value = 'pointToPoint'; // 默认选择点对点路线规划\r\n    };\r\n\r\n    const addViaPoint = () => {\r\n      viaPoints.value.push('');\r\n    };\r\n\r\n    const searchRoute = async () => {\r\n      try {\r\n        const response = await axios.post('/api/route-plan', {\r\n          area: currentArea.value,\r\n          type: routeType.value,\r\n          startPoint: startPoint.value,\r\n          endPoint: endPoint.value,\r\n          currentLocation: currentLocation.value,\r\n          viaPoints: viaPoints.value,\r\n          transport: transport.value,\r\n        });\r\n\r\n        if (response.data.success) {\r\n          routeInfo.value = response.data.info;\r\n        } else {\r\n          error.value = response.data.error;\r\n        }\r\n      } catch (err) {\r\n        error.value = '搜索路线时发生错误。';\r\n      }\r\n    };\r\n\r\n    // 定义跳转到首页的函数\r\n    const goToDashboard = () => {\r\n      router.push('/dashboard');\r\n    };\r\n\r\n    return {\r\n      currentArea,\r\n      routeType,\r\n      startPoint,\r\n      endPoint,\r\n      currentLocation,\r\n      viaPoints,\r\n      transport,\r\n      error,\r\n      routeInfo,\r\n      selectArea,\r\n      addViaPoint,\r\n      searchRoute,\r\n      toggleRouteType,\r\n      resetFields,\r\n      goToDashboard,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 你的 CSS 样式 */\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
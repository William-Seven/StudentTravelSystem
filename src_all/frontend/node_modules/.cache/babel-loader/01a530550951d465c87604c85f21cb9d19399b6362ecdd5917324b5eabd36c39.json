{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport axios from 'axios';\nimport { useRouter } from 'vue-router';\nexport default {\n  name: 'PlaceQuery',\n  setup() {\n    const currentLocation = ref(''); // 当前位置\n    const currentLocationName = ref('');\n    const searchRange = ref(500); // 查询范围，默认200米\n    const placeType = ref('all'); // 场所种类\n    const searchResults = ref([]); // 搜索结果\n    const router = useRouter(); // vue-router\n\n    //解析后端返回的JSON数据\n    const parseSearchResults = data => {\n      return data.filter(line => line.trim() !== '').map(line => {\n        const parts = line.split(' '); // 根据空格分割每一行\n        return {\n          id: parts[0],\n          name: parts[1],\n          // 类型\n          type: parts[2],\n          // 名称\n          distance: parseInt(parts[3], 10) // 距离，转换为整数\n        };\n      });\n    };\n\n    // 搜索场所\n    const search = async () => {\n      try {\n        const response = await axios.post('/api/place-query', {\n          currentLocation: currentLocation.value,\n          searchRange: searchRange.value,\n          placeType: placeType.value\n        });\n        if (response.data.success) {\n          const listString = response.data.list.split('\\n');\n          searchResults.value = parseSearchResults(listString.slice(1)); // 假设后端返回的数据是数组格式\n          currentLocationName.value = listString[0].trim();\n        }\n      } catch (err) {\n        console.error('Error searching places:', err);\n      }\n    };\n\n    // 跳转到首页\n    const goToDashboard = () => {\n      router.push('/dashboard');\n    };\n\n    // 新增跳转到路线规划的方法\n    const goToRoutePlanner = endPointId => {\n      // 假设当前位置编号存储在 currentLocation.value 中\n      const startPointId = currentLocation.value;\n      router.push({\n        path: '/route-planning',\n        query: {\n          startPoint: startPointId,\n          endPoint: endPointId\n        }\n      });\n    };\n    return {\n      currentLocation,\n      currentLocationName,\n      searchRange,\n      placeType,\n      searchResults,\n      search,\n      goToDashboard,\n      goToRoutePlanner\n    };\n  }\n};","map":{"version":3,"names":["ref","axios","useRouter","name","setup","currentLocation","currentLocationName","searchRange","placeType","searchResults","router","parseSearchResults","data","filter","line","trim","map","parts","split","id","type","distance","parseInt","search","response","post","value","success","listString","list","slice","err","console","error","goToDashboard","push","goToRoutePlanner","endPointId","startPointId","path","query","startPoint","endPoint"],"sources":["D:\\Users\\SevenGrass\\Documents\\WILLIAMZHANG\\DataStrucCourseDes\\MyGithub\\src_all\\frontend\\src\\components\\PlaceQuery.vue"],"sourcesContent":["<!-- PlaceQuery.vue -->\r\n<template>\r\n    <div class=\"place-query\">\r\n        <h1>场所查询</h1>\r\n        <button @click=\"goToDashboard\">返回首页</button>\r\n        <button @click=\"toggleArea('scenic')\">景区</button>\r\n<button @click=\"toggleArea('campus')\">校园</button>\r\n        <!-- 当前位置输入 -->\r\n        <div>\r\n            <label for=\"currentLocation\">当前位置:</label>\r\n            <input type=\"text\" id=\"currentLocation\" v-model=\"currentLocation\" required>\r\n        </div>\r\n        <!-- 查询范围输入 -->\r\n        <div>\r\n            <label for=\"searchRange\">查询范围 (米):</label>\r\n            <!-- 用户可以输入自定义距离 -->\r\n            <input type=\"number\" id=\"searchRange\" v-model.number=\"searchRange\" min=\"0\" required>\r\n        </div>\r\n        <div>\r\n            <!-- 或者使用拖拽条选择距离范围 -->\r\n            <input type=\"range\" v-model.number=\"searchRange\" min=\"0\" max=\"5000\" step=\"10\">\r\n        </div>\r\n        <!-- 场所种类选择 -->\r\n        <div>\r\n            <label for=\"placeType\">场所种类:</label>\r\n            <select id=\"placeType\" v-model=\"placeType\">\r\n                <option value=\"all\">全部</option>\r\n                <option value=\"卫生间\">卫生间</option>\r\n                <option value=\"餐饮\">餐饮</option>\r\n                <option value=\"商店\">商店</option>\r\n                <option value=\"广播\">广播</option>\r\n                <option value=\"医务室\">医务室</option>\r\n                <option value=\"服务厅\">服务厅</option>\r\n                <option value=\"停车场\">停车场</option>\r\n                <option value=\"快递站\">快递站</option>\r\n                <option value=\"体育场\">体育场</option>\r\n                <option value=\"图书馆\">图书馆</option>\r\n                <option value=\"医院\">医院</option>\r\n                <option value=\"酒店\">酒店</option>\r\n                <!-- 添加更多场所种类选项 -->\r\n            </select>\r\n        </div>\r\n        <!-- 搜索按钮 -->\r\n        <button @click=\"search\">查询</button>\r\n        <!-- 当前位置显示 -->\r\n        <p v-if=\"currentLocationName\">当前位置: {{ currentLocationName }}</p>\r\n        <!-- 搜索结果列表 -->\r\n        <ul v-if=\"searchResults && searchResults.length\" class=\"search-results\">\r\n            <li v-for=\"result in searchResults\" :key=\"result.id\" class=\"result-item\">\r\n                <p>编号：{{ result.id }}</p>\r\n                <p>名称：{{ result.name }}</p>\r\n                <p>类型：{{ result.type }}</p>\r\n                <p>距离：{{ result.distance }} 米</p>\r\n                <!-- 添加“路线”按钮 -->\r\n                <button @click=\"goToRoutePlanner(result.id)\">路线</button>\r\n            </li>\r\n        </ul>\r\n        <p v-else-if=\"searchResults && !searchResults.length\">没有找到相关场所</p>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\nimport axios from 'axios';\r\nimport { useRouter } from 'vue-router';\r\n\r\nexport default {\r\n    name: 'PlaceQuery',\r\n    setup() {\r\n        const currentLocation = ref(''); // 当前位置\r\n        const currentLocationName = ref('');\r\n        const searchRange = ref(500); // 查询范围，默认200米\r\n        const placeType = ref('all'); // 场所种类\r\n        const searchResults = ref([]); // 搜索结果\r\n        const router = useRouter(); // vue-router\r\n\r\n        //解析后端返回的JSON数据\r\n        const parseSearchResults = (data) => {\r\n            return data.filter(line => line.trim() !== '').map(line => {\r\n                const parts = line.split(' '); // 根据空格分割每一行\r\n                return {\r\n                    id: parts[0],\r\n                    name: parts[1], // 类型\r\n                    type: parts[2], // 名称\r\n                    distance: parseInt(parts[3], 10), // 距离，转换为整数\r\n                };\r\n            });\r\n        };\r\n\r\n        // 搜索场所\r\n        const search = async () => {\r\n            try {\r\n                const response = await axios.post('/api/place-query', {\r\n                    currentLocation: currentLocation.value,\r\n                    searchRange: searchRange.value,\r\n                    placeType: placeType.value,\r\n                });\r\n                if (response.data.success) {\r\n                    const listString = response.data.list.split('\\n');\r\n                    searchResults.value = parseSearchResults(listString.slice(1)); // 假设后端返回的数据是数组格式\r\n                    currentLocationName.value = listString[0].trim();\r\n                }\r\n            } catch (err) {\r\n                console.error('Error searching places:', err);\r\n            }\r\n        };\r\n\r\n        // 跳转到首页\r\n        const goToDashboard = () => {\r\n            router.push('/dashboard');\r\n        };\r\n\r\n        // 新增跳转到路线规划的方法\r\n        const goToRoutePlanner = (endPointId) => {\r\n            // 假设当前位置编号存储在 currentLocation.value 中\r\n            const startPointId = currentLocation.value;\r\n            router.push({\r\n                path: '/route-planning',\r\n                query: {\r\n                    startPoint: startPointId,\r\n                    endPoint: endPointId\r\n                }\r\n            });\r\n        };\r\n\r\n        return {\r\n            currentLocation,\r\n            currentLocationName,\r\n            searchRange,\r\n            placeType,\r\n            searchResults,\r\n            search,\r\n            goToDashboard,\r\n            goToRoutePlanner,\r\n        };\r\n    },\r\n};\r\n</script>"],"mappings":";AA8DA,SAASA,GAAE,QAAS,KAAK;AACzB,OAAOC,KAAI,MAAO,OAAO;AACzB,SAASC,SAAQ,QAAS,YAAY;AAEtC,eAAe;EACXC,IAAI,EAAE,YAAY;EAClBC,KAAKA,CAAA,EAAG;IACJ,MAAMC,eAAc,GAAIL,GAAG,CAAC,EAAE,CAAC,EAAE;IACjC,MAAMM,mBAAkB,GAAIN,GAAG,CAAC,EAAE,CAAC;IACnC,MAAMO,WAAU,GAAIP,GAAG,CAAC,GAAG,CAAC,EAAE;IAC9B,MAAMQ,SAAQ,GAAIR,GAAG,CAAC,KAAK,CAAC,EAAE;IAC9B,MAAMS,aAAY,GAAIT,GAAG,CAAC,EAAE,CAAC,EAAE;IAC/B,MAAMU,MAAK,GAAIR,SAAS,CAAC,CAAC,EAAE;;IAE5B;IACA,MAAMS,kBAAiB,GAAKC,IAAI,IAAK;MACjC,OAAOA,IAAI,CAACC,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACC,IAAI,CAAC,MAAM,EAAE,CAAC,CAACC,GAAG,CAACF,IAAG,IAAK;QACvD,MAAMG,KAAI,GAAIH,IAAI,CAACI,KAAK,CAAC,GAAG,CAAC,EAAE;QAC/B,OAAO;UACHC,EAAE,EAAEF,KAAK,CAAC,CAAC,CAAC;UACZd,IAAI,EAAEc,KAAK,CAAC,CAAC,CAAC;UAAE;UAChBG,IAAI,EAAEH,KAAK,CAAC,CAAC,CAAC;UAAE;UAChBI,QAAQ,EAAEC,QAAQ,CAACL,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAE;QACtC,CAAC;MACL,CAAC,CAAC;IACN,CAAC;;IAED;IACA,MAAMM,MAAK,GAAI,MAAAA,CAAA,KAAY;MACvB,IAAI;QACA,MAAMC,QAAO,GAAI,MAAMvB,KAAK,CAACwB,IAAI,CAAC,kBAAkB,EAAE;UAClDpB,eAAe,EAAEA,eAAe,CAACqB,KAAK;UACtCnB,WAAW,EAAEA,WAAW,CAACmB,KAAK;UAC9BlB,SAAS,EAAEA,SAAS,CAACkB;QACzB,CAAC,CAAC;QACF,IAAIF,QAAQ,CAACZ,IAAI,CAACe,OAAO,EAAE;UACvB,MAAMC,UAAS,GAAIJ,QAAQ,CAACZ,IAAI,CAACiB,IAAI,CAACX,KAAK,CAAC,IAAI,CAAC;UACjDT,aAAa,CAACiB,KAAI,GAAIf,kBAAkB,CAACiB,UAAU,CAACE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;UAC/DxB,mBAAmB,CAACoB,KAAI,GAAIE,UAAU,CAAC,CAAC,CAAC,CAACb,IAAI,CAAC,CAAC;QACpD;MACJ,EAAE,OAAOgB,GAAG,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEF,GAAG,CAAC;MACjD;IACJ,CAAC;;IAED;IACA,MAAMG,aAAY,GAAIA,CAAA,KAAM;MACxBxB,MAAM,CAACyB,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;;IAED;IACA,MAAMC,gBAAe,GAAKC,UAAU,IAAK;MACrC;MACA,MAAMC,YAAW,GAAIjC,eAAe,CAACqB,KAAK;MAC1ChB,MAAM,CAACyB,IAAI,CAAC;QACRI,IAAI,EAAE,iBAAiB;QACvBC,KAAK,EAAE;UACHC,UAAU,EAAEH,YAAY;UACxBI,QAAQ,EAAEL;QACd;MACJ,CAAC,CAAC;IACN,CAAC;IAED,OAAO;MACHhC,eAAe;MACfC,mBAAmB;MACnBC,WAAW;MACXC,SAAS;MACTC,aAAa;MACbc,MAAM;MACNW,aAAa;MACbE;IACJ,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
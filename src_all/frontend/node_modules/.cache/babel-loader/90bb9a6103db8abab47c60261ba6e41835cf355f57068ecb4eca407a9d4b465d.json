{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport { useRouter } from 'vue-router';\nexport default {\n  name: 'RoutePlanner',\n  setup() {\n    const currentArea = ref('scenic');\n    const routeType = ref('pointToPoint'); // 默认为点对点路线规划\n    const startPoint = ref('');\n    const endPoint = ref('');\n    const currentLocation = ref('');\n    const viaPoints = ref(['']);\n    const transport = ref('walk');\n    const error = ref('');\n    const routeInfo = ref('');\n    const router = useRouter();\n\n    // 从路由获取查询参数\n    const {\n      query\n    } = router.currentRoute.value;\n\n    // 新增重置字段的函数\n    const resetFields = () => {\n      startPoint.value = '';\n      endPoint.value = '';\n      currentLocation.value = '';\n      viaPoints.value = ['']; // 重置途径点列表\n      transport.value = 'walk'; // 重置交通工具\n      error.value = ''; // 清除错误信息\n      routeInfo.value = ''; // 清除路线信息\n    };\n\n    //onMounted(resetFields); // 组件挂载时重置字段\n\n    onMounted(() => {\n      // 组件挂载时重置字段\n      resetFields();\n\n      // 设置起点和终点\n      if (query.startPoint && query.endPoint) {\n        startPoint.value = query.startPoint;\n        endPoint.value = query.endPoint;\n      }\n    });\n    const toggleRouteType = () => {\n      resetFields(); // 添加重置字段操作\n      routeType.value = routeType.value === 'pointToPoint' ? 'multipleWaypoints' : 'pointToPoint';\n    };\n    const selectArea = area => {\n      resetFields(); // 添加重置字段操作\n      currentArea.value = area;\n      //routeType.value = 'pointToPoint'; // 默认选择点对点路线规划\n    };\n    const addViaPoint = () => {\n      viaPoints.value.push('');\n    };\n    const searchRoute = async () => {\n      try {\n        const response = await axios.post('/api/route-plan', {\n          area: currentArea.value,\n          type: routeType.value,\n          startPoint: startPoint.value,\n          endPoint: endPoint.value,\n          currentLocation: currentLocation.value,\n          viaPoints: viaPoints.value,\n          transport: transport.value\n        });\n        if (response.data.success) {\n          routeInfo.value = response.data.info;\n        } else {\n          error.value = response.data.error;\n        }\n      } catch (err) {\n        error.value = '搜索路线时发生错误。';\n      }\n    };\n\n    // 定义跳转到首页的函数\n    const goToDashboard = () => {\n      router.push('/dashboard');\n    };\n    return {\n      currentArea,\n      routeType,\n      startPoint,\n      endPoint,\n      currentLocation,\n      viaPoints,\n      transport,\n      error,\n      routeInfo,\n      selectArea,\n      addViaPoint,\n      searchRoute,\n      toggleRouteType,\n      resetFields,\n      goToDashboard\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","useRouter","name","setup","currentArea","routeType","startPoint","endPoint","currentLocation","viaPoints","transport","error","routeInfo","router","query","currentRoute","value","resetFields","toggleRouteType","selectArea","area","addViaPoint","push","searchRoute","response","post","type","data","success","info","err","goToDashboard"],"sources":["D:\\Users\\SevenGrass\\Documents\\WILLIAMZHANG\\DataStrucCourseDes\\MyGithub\\src_all\\frontend\\src\\components\\RoutePlanner.vue"],"sourcesContent":["<!-- RoutePlanner.vue -->\r\n<template>\r\n  <div class=\"route-planner\">\r\n    <form class=\"form1\">\r\n      <h1 class=\"title\">路线规划</h1>\r\n      <button class=\"return_button\" @click=\"goToDashboard\">返回首页</button>\r\n      <!-- 选择景区或校园 -->\r\n      <div>\r\n        <button class=\"scenic_button\" @click.prevent=\"selectArea('scenic')\">景区</button>\r\n        <button class=\"campus_button\" @click.prevent=\"selectArea('campus')\">校园</button>\r\n      </div>\r\n      <!-- 根据选择显示不同的输入框 -->\r\n      <!-- 切换点对点和多途径点 -->\r\n      <div v-if=\"currentArea\">\r\n        <h2 class=\"subtitle\">{{ currentArea === 'scenic' ? '景区路线规划' : '校园路线规划' }}</h2>\r\n        <button class=\"switch_button\" @click.prevent=\"toggleRouteType\">切换到{{ routeType === 'pointToPoint' ? '多途径点' : '点对点' }}</button>\r\n        <!-- 点对点路线规划 -->\r\n        <div v-if=\"routeType === 'pointToPoint'\">\r\n          <input class=\"input_start\" v-model=\"startPoint\" placeholder=\"起点\">\r\n          <input class=\"input_end\" v-model=\"endPoint\" placeholder=\"终点\">\r\n          <select v-model=\"transport\">\r\n            <option value=\"walk\">步行</option>\r\n            <!--景区特有的电动车-->\r\n            <option v-if=\"currentArea === 'scenic'\" value=\"ebike\">电动车</option>\r\n            <!-- 校园的交通工具选项 -->\r\n            <option v-if=\"currentArea === 'campus'\" value=\"bike\">自行车</option>\r\n          </select>\r\n          <button class=\"search_button1\" @click.prevent=\"searchRoute\">搜索</button>\r\n        </div>\r\n        <!-- 多途径点路线规划 -->\r\n        <div v-else>\r\n          <input class=\"input_start\" v-model=\"currentLocation\" placeholder=\"当前位置\">\r\n          <div v-for=\"(point, index) in viaPoints\" :key=\"index\">\r\n            <input class=\"input_passing\" v-model=\"viaPoints[index]\" placeholder=\"途径点\">\r\n          </div>\r\n          <button class=\"add_button\" @click.prevent=\"addViaPoint\">添加途径点</button>\r\n          <button class=\"search_botton2\" @click.prevent=\"searchRoute\">搜索</button>\r\n        </div>\r\n      </div>\r\n      <div v-if=\"error\" class=\"error\">{{ error }}</div>\r\n      <div v-if=\"routeInfo\" class=\"route-info\">\r\n        <h3 class=\"subtitle2\">路线信息:</h3>\r\n        <!-- 使用 v-html 来渲染HTML实体 -->\r\n        <div class=\"routeInfo\" v-html=\"routeInfo\"></div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport { useRouter } from 'vue-router';\r\n\r\nexport default {\r\n  name: 'RoutePlanner',\r\n  setup() {\r\n    const currentArea = ref('scenic');\r\n    const routeType = ref('pointToPoint'); // 默认为点对点路线规划\r\n    const startPoint = ref('');\r\n    const endPoint = ref('');\r\n    const currentLocation = ref('');\r\n    const viaPoints = ref(['']);\r\n    const transport = ref('walk');\r\n    const error = ref('');\r\n    const routeInfo = ref('');\r\n    const router = useRouter();\r\n\r\n    // 从路由获取查询参数\r\n    const { query } = router.currentRoute.value;\r\n\r\n    // 新增重置字段的函数\r\n    const resetFields = () => {\r\n      startPoint.value = '';\r\n      endPoint.value = '';\r\n      currentLocation.value = '';\r\n      viaPoints.value = ['']; // 重置途径点列表\r\n      transport.value = 'walk'; // 重置交通工具\r\n      error.value = ''; // 清除错误信息\r\n      routeInfo.value = ''; // 清除路线信息\r\n    };\r\n\r\n    //onMounted(resetFields); // 组件挂载时重置字段\r\n\r\n    onMounted(() => {\r\n      // 组件挂载时重置字段\r\n      resetFields();\r\n\r\n      // 设置起点和终点\r\n      if (query.startPoint && query.endPoint) {\r\n        startPoint.value = query.startPoint;\r\n        endPoint.value = query.endPoint;\r\n      }\r\n    });\r\n\r\n    const toggleRouteType = () => {\r\n      resetFields(); // 添加重置字段操作\r\n      routeType.value = routeType.value === 'pointToPoint' ? 'multipleWaypoints' : 'pointToPoint';\r\n    };\r\n\r\n    const selectArea = (area) => {\r\n      resetFields(); // 添加重置字段操作\r\n      currentArea.value = area;\r\n      //routeType.value = 'pointToPoint'; // 默认选择点对点路线规划\r\n    };\r\n\r\n    const addViaPoint = () => {\r\n      viaPoints.value.push('');\r\n    };\r\n\r\n    const searchRoute = async () => {\r\n      try {\r\n        const response = await axios.post('/api/route-plan', {\r\n          area: currentArea.value,\r\n          type: routeType.value,\r\n          startPoint: startPoint.value,\r\n          endPoint: endPoint.value,\r\n          currentLocation: currentLocation.value,\r\n          viaPoints: viaPoints.value,\r\n          transport: transport.value,\r\n        });\r\n\r\n        if (response.data.success) {\r\n          routeInfo.value = response.data.info;\r\n        } else {\r\n          error.value = response.data.error;\r\n        }\r\n      } catch (err) {\r\n        error.value = '搜索路线时发生错误。';\r\n      }\r\n    };\r\n\r\n    // 定义跳转到首页的函数\r\n    const goToDashboard = () => {\r\n      router.push('/dashboard');\r\n    };\r\n\r\n    return {\r\n      currentArea,\r\n      routeType,\r\n      startPoint,\r\n      endPoint,\r\n      currentLocation,\r\n      viaPoints,\r\n      transport,\r\n      error,\r\n      routeInfo,\r\n      selectArea,\r\n      addViaPoint,\r\n      searchRoute,\r\n      toggleRouteType,\r\n      resetFields,\r\n      goToDashboard,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.route-planner {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n  background-attachment: fixed;\r\n  overflow: hidden;\r\n  background-image: url('~@/assets/img/background.png');\r\n  background-size: cover;\r\n}\r\n\r\n.form1 {\r\n  position: absolute;\r\n  padding:2%;\r\n  top: 5%;\r\n  left:2%;\r\n  width: 550px;\r\n  min-height: 500px;\r\n  background: rgba(255, 255, 255, 0.2);\r\n  backdrop-filter: blur(10px);\r\n  border-radius: 20px; /* 设置圆角为20像素 */\r\n  /* 其他样式，例如边框、阴影等 */\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 添加轻微的阴影效果 */\r\n}\r\n\r\n.title {\r\n  color: #fefefe;\r\n  font-size: 4em; /* 设置字号大小 */\r\n  margin:0%;\r\n  font-family: 'STKaiti', 'KaiTi', sans-serif; /* 优先使用华文楷体，如果不可用则使用无衬线字体 */\r\n  max-width: 80%;\r\n  margin-top: 0vh; \r\n  text-align: center;\r\n  margin-left: auto; /* 左外边距自动 */\r\n  margin-right: auto; /* 右外边距自动 */\r\n  margin-bottom: 0.5em;\r\n}\r\n\r\nbutton {\r\n  justify-content: space-between;\r\n  margin: auto;\r\n  position: absolute;\r\n  font-size: 1em;\r\n  border: 1px solid #000; /* 边框样式，可以根据需要调整 */\r\n  cursor: pointer; /* 鼠标悬停时显示指针手势 */\r\n  border-radius: 8px; /* 添加圆角 */\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #56cfcf;\r\n}\r\n\r\n.return_button {\r\n  transform: translate(-50%, -50%);\r\n  position: absolute;\r\n  top: 10%;\r\n  left: 10%;\r\n  margin: auto;\r\n}\r\n\r\n.scenic_button {\r\n  transform: translate(-50%, -50%);\r\n  position: absolute;\r\n  top: 22%;\r\n  left: 45%;\r\n}\r\n\r\n.campus_button {\r\n  transform: translate(-50%, -50%);\r\n  position: absolute;\r\n  top: 22%;\r\n  left: 55%;\r\n}\r\n\r\n.search_botton1, .search_botton2 {\r\n  position: absolute;\r\n  top: 22%;\r\n  left: 55%;\r\n}\r\n\r\n.subtitle {\r\n  color: #fefefe;\r\n  font-size: 2em; /* 设置字号大小 */\r\n  font-family: 'STKaiti', 'KaiTi', sans-serif; /* 优先使用华文楷体，如果不可用则使用无衬线字体 */\r\n  max-width: 80%;\r\n  margin-top:2vh;\r\n  margin-bottom:2vh;\r\n}\r\n\r\n.input_start, .input_end, .input_passing {\r\n  color: #000000;\r\n  font-size: 0.5em;\r\n  font-family: 'STKaiti', 'KaiTi', sans-serif;\r\n  position: relative;\r\n  width:25%;\r\n  border-radius: 8px; /* 添加圆角 */\r\n  margin-right: 1em;\r\n}\r\n\r\n.input_start, .input_end {\r\n  margin-top: 3em;\r\n}\r\n\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
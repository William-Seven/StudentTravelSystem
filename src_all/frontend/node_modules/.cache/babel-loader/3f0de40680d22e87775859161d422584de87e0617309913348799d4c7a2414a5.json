{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { ref } from 'vue';\nimport { useRouter } from 'vue-router';\nexport default {\n  setup() {\n    const username = ref('');\n    const password = ref('');\n    const confirmPassword = ref('');\n    const registerError = ref(''); // 用于存储注册错误信息\n    const output = ref('');\n    const showLoginButton = ref(false); // 控制登录按钮显示的变量\n    const router = useRouter();\n    const handleSubmit = async () => {\n      if (password.value !== confirmPassword.value) {\n        registerError.value = '两次输入的密码不一致。';\n        return;\n      }\n      try {\n        const response = await axios.post('http://localhost:3000/api/register', {\n          username: username.value,\n          password: password.value\n        });\n        if (response.status === 200) {\n          output.value = response.data; // 将后端返回的输出存储在 output 变量中\n          // 注册成功处理\n          if (response.data === '注册成功') {\n            alert('注册成功');\n            router.push('/login'); // 注册成功后跳转到登录页面\n          }\n          // 这里可以添加代码来处理注册成功的逻辑，如跳转到登录页面\n        }\n      } catch (error) {\n        // 网络或其他错误处理\n        registerError.value = '注册过程中发生错误。' + error.message;\n      }\n    };\n\n    // 返回响应式引用供模板使用\n    return {\n      username,\n      password,\n      confirmPassword,\n      registerError,\n      output,\n      handleSubmit\n    };\n  }\n};","map":{"version":3,"names":["axios","ref","useRouter","setup","username","password","confirmPassword","registerError","output","showLoginButton","router","handleSubmit","value","response","post","status","data","alert","push","error","message"],"sources":["D:\\Users\\SevenGrass\\Documents\\WILLIAMZHANG\\DataStrucCourseDes\\vue\\frontend\\src\\components\\myRegister.vue"],"sourcesContent":["<template>\r\n    <div class=\"register-container\">\r\n        <h2>注册</h2>\r\n        <form @submit.prevent=\"handleSubmit\">\r\n            <div>\r\n                <label for=\"username\">用户名:</label>\r\n                <input type=\"text\" id=\"username\" v-model=\"username\" required>\r\n            </div>\r\n            <div>\r\n                <label for=\"password\">密码:</label>\r\n                <input type=\"password\" id=\"password\" v-model=\"password\" required>\r\n            </div>\r\n            <div>\r\n                <label for=\"confirmPassword\">确认密码:</label>\r\n                <input type=\"password\" id=\"confirmPassword\" v-model=\"confirmPassword\" required>\r\n            </div>\r\n            <button type=\"submit\">注册</button>\r\n            <p v-if=\"registerError\">{{ registerError }}</p> <!-- 显示注册错误信息 -->\r\n            <p v-if=\"output\">{{ output }}</p> <!-- 新增：显示从后端接收的输出 -->\r\n        </form>\r\n        <button v-if=\"showLoginButton\" @click=\"goToLogin\">返回登录页面</button>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport { ref } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\n\r\nexport default {\r\n    setup() {\r\n        const username = ref('');\r\n        const password = ref('');\r\n        const confirmPassword = ref('');\r\n        const registerError = ref(''); // 用于存储注册错误信息\r\n        const output = ref('');\r\n        const showLoginButton = ref(false); // 控制登录按钮显示的变量\r\n        const router = useRouter();\r\n\r\n        const handleSubmit = async () => {\r\n            if (password.value !== confirmPassword.value) {\r\n                registerError.value = '两次输入的密码不一致。';\r\n                return;\r\n            }\r\n\r\n            try {\r\n                const response = await axios.post('http://localhost:3000/api/register', {\r\n                    username: username.value,\r\n                    password: password.value\r\n                });\r\n                if (response.status === 200) {\r\n                    output.value = response.data; // 将后端返回的输出存储在 output 变量中\r\n                    // 注册成功处理\r\n                    if (response.data === '注册成功') {\r\n                        alert('注册成功');\r\n                        router.push('/login'); // 注册成功后跳转到登录页面\r\n                    }\r\n                    // 这里可以添加代码来处理注册成功的逻辑，如跳转到登录页面\r\n                }\r\n            } catch (error) {\r\n                // 网络或其他错误处理\r\n                registerError.value = '注册过程中发生错误。' + error.message;\r\n            }\r\n        };\r\n\r\n        // 返回响应式引用供模板使用\r\n        return {\r\n            username,\r\n            password,\r\n            confirmPassword,\r\n            registerError,\r\n            output,\r\n            handleSubmit\r\n        };\r\n    }\r\n};\r\n</script>"],"mappings":";AAyBA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,GAAE,QAAS,KAAK;AACzB,SAASC,SAAQ,QAAS,YAAY;AAEtC,eAAe;EACXC,KAAKA,CAAA,EAAG;IACJ,MAAMC,QAAO,GAAIH,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMI,QAAO,GAAIJ,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMK,eAAc,GAAIL,GAAG,CAAC,EAAE,CAAC;IAC/B,MAAMM,aAAY,GAAIN,GAAG,CAAC,EAAE,CAAC,EAAE;IAC/B,MAAMO,MAAK,GAAIP,GAAG,CAAC,EAAE,CAAC;IACtB,MAAMQ,eAAc,GAAIR,GAAG,CAAC,KAAK,CAAC,EAAE;IACpC,MAAMS,MAAK,GAAIR,SAAS,CAAC,CAAC;IAE1B,MAAMS,YAAW,GAAI,MAAAA,CAAA,KAAY;MAC7B,IAAIN,QAAQ,CAACO,KAAI,KAAMN,eAAe,CAACM,KAAK,EAAE;QAC1CL,aAAa,CAACK,KAAI,GAAI,aAAa;QACnC;MACJ;MAEA,IAAI;QACA,MAAMC,QAAO,GAAI,MAAMb,KAAK,CAACc,IAAI,CAAC,oCAAoC,EAAE;UACpEV,QAAQ,EAAEA,QAAQ,CAACQ,KAAK;UACxBP,QAAQ,EAAEA,QAAQ,CAACO;QACvB,CAAC,CAAC;QACF,IAAIC,QAAQ,CAACE,MAAK,KAAM,GAAG,EAAE;UACzBP,MAAM,CAACI,KAAI,GAAIC,QAAQ,CAACG,IAAI,EAAE;UAC9B;UACA,IAAIH,QAAQ,CAACG,IAAG,KAAM,MAAM,EAAE;YAC1BC,KAAK,CAAC,MAAM,CAAC;YACbP,MAAM,CAACQ,IAAI,CAAC,QAAQ,CAAC,EAAE;UAC3B;UACA;QACJ;MACJ,EAAE,OAAOC,KAAK,EAAE;QACZ;QACAZ,aAAa,CAACK,KAAI,GAAI,YAAW,GAAIO,KAAK,CAACC,OAAO;MACtD;IACJ,CAAC;;IAED;IACA,OAAO;MACHhB,QAAQ;MACRC,QAAQ;MACRC,eAAe;MACfC,aAAa;MACbC,MAAM;MACNG;IACJ,CAAC;EACL;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
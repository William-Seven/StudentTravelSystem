{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted } from 'vue';\nimport axios from 'axios';\nimport { useRouter } from 'vue-router';\nexport default {\n  name: 'PlaceQuery',\n  setup() {\n    const currentLocation = ref(''); // 当前位置\n    const currentLocationName = ref('');\n    const searchRange = ref(500); // 查询范围，默认200米\n    const placeType = ref('all'); // 场所种类\n    const searchResults = ref([]); // 搜索结果\n    const area = ref('scenic');\n    const router = useRouter(); // vue-router\n\n    const resetFields = () => {\n      currentLocation.value = '';\n      currentLocationName.value = '';\n      searchRange.value = 500;\n      placeType.value = 'all';\n      searchResults.value = [];\n    };\n    onMounted(() => {\n      resetFields();\n    });\n\n    //解析后端返回的JSON数据\n    const parseSearchResults = data => {\n      return data.filter(line => line.trim() !== '').map(line => {\n        const parts = line.split(' '); // 根据空格分割每一行\n        return {\n          id: parts[0],\n          name: parts[1],\n          // 类型\n          type: parts[2],\n          // 名称\n          distance: parseInt(parts[3], 10) // 距离，转换为整数\n        };\n      });\n    };\n\n    // 搜索场所\n    const search = async () => {\n      try {\n        const apiUrl = area.value === 'campus' ? '/api/place-querysc' : '/api/place-query';\n        const response = await axios.post(apiUrl, {\n          currentLocation: currentLocation.value,\n          searchRange: searchRange.value,\n          placeType: placeType.value\n        });\n        if (response.data.success) {\n          const listString = response.data.list.split('\\n');\n          searchResults.value = parseSearchResults(listString.slice(1)); // 假设后端返回的数据是数组格式\n          currentLocationName.value = listString[0].trim();\n        }\n      } catch (err) {\n        console.error('Error searching places:', err);\n      }\n    };\n    const toggleArea = newArea => {\n      area.value = newArea;\n      // 可以在这里添加额外的逻辑，比如重置搜索结果\n    };\n\n    // 跳转到首页\n    const goToDashboard = () => {\n      router.push('/dashboard');\n    };\n\n    // 新增跳转到路线规划的方法\n    const goToRoutePlanner = endPointId => {\n      // 假设当前位置编号存储在 currentLocation.value 中\n      const startPointId = currentLocation.value;\n      router.push({\n        path: '/route-planning',\n        query: {\n          startPoint: startPointId,\n          endPoint: endPointId,\n          area: area.value\n        }\n      });\n    };\n    return {\n      currentLocation,\n      currentLocationName,\n      searchRange,\n      placeType,\n      searchResults,\n      search,\n      goToDashboard,\n      goToRoutePlanner,\n      toggleArea,\n      area,\n      resetFields\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","axios","useRouter","name","setup","currentLocation","currentLocationName","searchRange","placeType","searchResults","area","router","resetFields","value","parseSearchResults","data","filter","line","trim","map","parts","split","id","type","distance","parseInt","search","apiUrl","response","post","success","listString","list","slice","err","console","error","toggleArea","newArea","goToDashboard","push","goToRoutePlanner","endPointId","startPointId","path","query","startPoint","endPoint"],"sources":["D:\\Users\\SevenGrass\\Documents\\WILLIAMZHANG\\DataStrucCourseDes\\MyGithub\\src_all\\frontend\\src\\components\\PlaceQuery.vue"],"sourcesContent":["<!-- PlaceQuery.vue -->\r\n<template>\r\n    <div class=\"background\"></div>\r\n    <div v-show=\"area\" class=\"map-container\">\r\n        <img :src=\"area === 'scenic' ? require('@/assets/map/map.png') : require('@/assets/map/mapsc.png')\" alt=\"Map\">\r\n    </div>\r\n    <form class=\"form\">\r\n        <div class=\"place-query\">\r\n            <h1 class=\"title\">场所查询</h1>\r\n            <button class=\"return_button\" @click.prevent=\"goToDashboard\">返回首页</button>\r\n            <button class=\"scenic_button\" @click=\"toggleArea('scenic')\">景区</button>\r\n            <button class=\"campus_button\" @click=\"toggleArea('campus')\">校园</button>\r\n            <div v-if=\"area\">\r\n                <h2 class=\"subtitle\">{{ area === 'scenic' ? '景区场所' : '校园场所' }}</h2>\r\n            </div>\r\n            <!-- 当前位置输入 -->\r\n            <div>\r\n                <label for=\"currentLocation\">当前位置:</label>\r\n                <input type=\"text\" id=\"currentLocation\" v-model=\"currentLocation\" required>\r\n            </div>\r\n            <!-- 查询范围输入 -->\r\n            <div>\r\n                <label for=\"searchRange\">查询范围 (米):</label>\r\n                <!-- 用户可以输入自定义距离 -->\r\n                <input type=\"number\" id=\"searchRange\" v-model.number=\"searchRange\" min=\"0\" required>\r\n            </div>\r\n            <div>\r\n                <!-- 或者使用拖拽条选择距离范围 -->\r\n                <input type=\"range\" v-model.number=\"searchRange\" min=\"0\" max=\"5000\" step=\"10\">\r\n            </div>\r\n            <!-- 场所种类选择 -->\r\n            <div>\r\n                <label for=\"placeType\">场所种类:</label>\r\n                <select id=\"placeType\" v-model=\"placeType\">\r\n                    <option value=\"all\">全部</option>\r\n                    <option value=\"卫生间\">卫生间</option>\r\n                    <option value=\"餐饮\">餐饮</option>\r\n                    <option value=\"商店\">商店</option>\r\n                    <option value=\"广播\">广播</option>\r\n                    <option value=\"医务室\">医务室</option>\r\n                    <option value=\"服务厅\">服务厅</option>\r\n                    <option value=\"停车场\">停车场</option>\r\n                    <option value=\"快递站\">快递站</option>\r\n                    <option value=\"体育场\">体育场</option>\r\n                    <option value=\"图书馆\">图书馆</option>\r\n                    <option value=\"医院\">医院</option>\r\n                    <option value=\"酒店\">酒店</option>\r\n                    <!-- 添加更多场所种类选项 -->\r\n                </select>\r\n            </div>\r\n            <!-- 搜索按钮 -->\r\n            <button class=\"search_button\" @click.prevent=\"search\">查询</button>\r\n            <!-- 当前位置显示 -->\r\n            <p class=\"subtitle2\" v-if=\"currentLocationName\">当前位置: {{ currentLocationName }}</p>\r\n            <!-- 搜索结果列表 -->\r\n            <ul v-if=\"searchResults && searchResults.length\" class=\"search-results\">\r\n                <li v-for=\"result in searchResults\" :key=\"result.id\" class=\"result-item\">\r\n                    <p>编号：{{ result.id }}</p>\r\n                    <p>名称：{{ result.name }}</p>\r\n                    <p>类型：{{ result.type }}</p>\r\n                    <p>距离：{{ result.distance }} 米</p>\r\n                    <!-- 添加“路线”按钮 -->\r\n                    <button @click.prevent=\"goToRoutePlanner(result.id)\">路线</button>\r\n                </li>\r\n            </ul>\r\n            <p class=\"error\" v-else-if=\"searchResults && !searchResults.length\">没有找到相关场所</p>\r\n        </div>\r\n    </form>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport axios from 'axios';\r\nimport { useRouter } from 'vue-router';\r\n\r\nexport default {\r\n    name: 'PlaceQuery',\r\n    setup() {\r\n        const currentLocation = ref(''); // 当前位置\r\n        const currentLocationName = ref('');\r\n        const searchRange = ref(500); // 查询范围，默认200米\r\n        const placeType = ref('all'); // 场所种类\r\n        const searchResults = ref([]); // 搜索结果\r\n        const area = ref('scenic'); \r\n        const router = useRouter(); // vue-router\r\n\r\n        const resetFields = () => {\r\n            currentLocation.value = '';\r\n            currentLocationName.value = '';\r\n            searchRange.value = 500;\r\n            placeType.value = 'all';\r\n            searchResults.value = [];\r\n        };\r\n\r\n        onMounted(() => {\r\n            resetFields();\r\n        });\r\n\r\n        //解析后端返回的JSON数据\r\n        const parseSearchResults = (data) => {\r\n            return data.filter(line => line.trim() !== '').map(line => {\r\n                const parts = line.split(' '); // 根据空格分割每一行\r\n                return {\r\n                    id: parts[0],\r\n                    name: parts[1], // 类型\r\n                    type: parts[2], // 名称\r\n                    distance: parseInt(parts[3], 10), // 距离，转换为整数\r\n                };\r\n            });\r\n        };\r\n\r\n        // 搜索场所\r\n        const search = async () => {\r\n            try {\r\n                const apiUrl = area.value === 'campus' ? '/api/place-querysc' : '/api/place-query';\r\n                const response = await axios.post(apiUrl, {\r\n                    currentLocation: currentLocation.value,\r\n                    searchRange: searchRange.value,\r\n                    placeType: placeType.value,\r\n                });\r\n                if (response.data.success) {\r\n                    const listString = response.data.list.split('\\n');\r\n                    searchResults.value = parseSearchResults(listString.slice(1)); // 假设后端返回的数据是数组格式\r\n                    currentLocationName.value = listString[0].trim();\r\n                }\r\n            } catch (err) {\r\n                console.error('Error searching places:', err);\r\n            }\r\n        };\r\n\r\n        const toggleArea = (newArea) => {\r\n            area.value = newArea;\r\n            // 可以在这里添加额外的逻辑，比如重置搜索结果\r\n        };\r\n\r\n        // 跳转到首页\r\n        const goToDashboard = () => {\r\n            router.push('/dashboard');\r\n        };\r\n\r\n        // 新增跳转到路线规划的方法\r\n        const goToRoutePlanner = (endPointId) => {\r\n            // 假设当前位置编号存储在 currentLocation.value 中\r\n            const startPointId = currentLocation.value;\r\n            router.push({\r\n                path: '/route-planning',\r\n                query: {\r\n                    startPoint: startPointId,\r\n                    endPoint: endPointId,\r\n                    area: area.value,\r\n                }\r\n            });\r\n        };\r\n\r\n        return {\r\n            currentLocation,\r\n            currentLocationName,\r\n            searchRange,\r\n            placeType,\r\n            searchResults,\r\n            search,\r\n            goToDashboard,\r\n            goToRoutePlanner,\r\n            toggleArea,\r\n            area,\r\n            resetFields,\r\n        };\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.background {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n  background-attachment: fixed;\r\n  overflow: hidden;\r\n  background-image: url('~@/assets/img/background.png');\r\n  background-size: cover;\r\n}\r\n\r\n.background::before {\r\n  content: \"\";\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-image: url('~@/assets/img/background.png');\r\n  background-size: cover;\r\n  background-attachment: fixed;\r\n  z-index: -1; /* 确保背景层在内容层之下 */\r\n}\r\n\r\n.form {\r\n  position: absolute;\r\n  padding:2%;\r\n  top: 5%;\r\n  left:2%;\r\n  width: 45%;\r\n  min-height: 500px;\r\n  background: rgba(255, 255, 255, 0.2);\r\n  backdrop-filter: blur(10px);\r\n  border-radius: 20px; /* 设置圆角为20像素 */\r\n  /* 其他样式，例如边框、阴影等 */\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* 添加轻微的阴影效果 */\r\n}\r\n\r\n.title {\r\n  color: #fefefe;\r\n  font-size: 4em; /* 设置字号大小 */\r\n  margin:0%;\r\n  font-family: 'STKaiti', 'KaiTi', sans-serif; /* 优先使用华文楷体，如果不可用则使用无衬线字体 */\r\n  max-width: 80%;\r\n  margin-top: 0vh; \r\n  text-align: center;\r\n  margin-left: auto; /* 左外边距自动 */\r\n  margin-right: auto; /* 右外边距自动 */\r\n  margin-bottom: 0.5em;\r\n}\r\n\r\n.subtitle, .subtitle2, .error {\r\n  color: #fefefe;\r\n  font-size: 2em; /* 设置字号大小 */\r\n  font-family: 'STKaiti', 'KaiTi', sans-serif; /* 优先使用华文楷体，如果不可用则使用无衬线字体 */\r\n  max-width: 80%;\r\n  text-align: center;\r\n  margin-left: auto; /* 左外边距自动 */\r\n  margin-right: auto; /* 右外边距自动 */\r\n  margin-bottom:2vh;\r\n}\r\n\r\nbutton {\r\n  justify-content: space-between;\r\n  margin: auto;\r\n  font-size: 1em;\r\n  border: 1px solid #000; /* 边框样式，可以根据需要调整 */\r\n  cursor: pointer; /* 鼠标悬停时显示指针手势 */\r\n  border-radius: 8px; /* 添加圆角 */\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #56cfcf;\r\n}\r\n\r\n.scenic_button {\r\n  transform: translate(-50%, -50%);\r\n  position: absolute;\r\n  top: 8em;\r\n  left: 45%;\r\n}\r\n\r\n.campus_button {\r\n  transform: translate(-50%, -50%);\r\n  position: absolute;\r\n  top: 8em;\r\n  left: 55%;\r\n}\r\n\r\n.return_button {\r\n  transform: translate(-50%, -50%);\r\n  position: absolute;\r\n  top: 2em;\r\n  left: 10%;\r\n}\r\n\r\n.search_button {\r\n  text-align: center;\r\n  font-size: 1.5em;\r\n  margin-top: 0.5em;\r\n  margin-left: auto; /* 左外边距自动 */\r\n  margin-right: auto; /* 右外边距自动 */\r\n  display: block;\r\n}\r\n\r\nlabel {\r\n  font-size: 1.5em;\r\n  color: #fefefe;\r\n}\r\n\r\n.result-item {\r\n  color: #fefefe;\r\n  margin-bottom: 3em;\r\n}\r\n\r\ninput[type=\"text\"], input[type=\"number\"] {\r\n  height: 1.5em;\r\n  margin-left: 1em;\r\n}\r\n\r\ninput[type=\"range\"] {\r\n    width:50%;\r\n}\r\n\r\n.map-container {\r\n  position: absolute;\r\n  top: 5%;\r\n  right: -5%;\r\n  width: 50%;\r\n  max-width: 95%; /* 确保地图容器的最大宽度不超过页面宽度 */\r\n  height: 96%;\r\n  max-height: 100%; /* 确保地图容器的最大高度不超过页面高度 */\r\n  background-color: transparent;\r\n  overflow: auto; /* 如果内容超出容器大小，添加滚动条 */\r\n}\r\n\r\n.map-container img {\r\n  width: 100%;\r\n  height: auto;\r\n  max-width: 96%; /* 确保图片的最大宽度不超过其容器的宽度 */\r\n  max-height: 96%; /* 确保图片的最大高度不超过其容器的高度 */\r\n  border: 1px solid #000;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  object-fit: contain; /* 保持图片的宽高比，确保图片完整显示在容器内 */\r\n}\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
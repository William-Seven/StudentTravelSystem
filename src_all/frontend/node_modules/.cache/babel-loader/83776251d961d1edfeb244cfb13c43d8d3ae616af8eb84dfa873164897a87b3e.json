{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelSelect as _vModelSelect, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"place-query\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"场所查询\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"currentLocation\"\n}, \"当前位置:\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"searchRange\"\n}, \"查询范围 (米):\", -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"placeType\"\n}, \"场所种类:\", -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createStaticVNode(\"<option value=\\\"all\\\">全部</option><option value=\\\"卫生间\\\">卫生间</option><option value=\\\"餐饮\\\">餐饮</option><option value=\\\"商店\\\">商店</option><option value=\\\"广播\\\">广播</option><option value=\\\"医务室\\\">医务室</option><option value=\\\"服务厅\\\">服务厅</option><option value=\\\"停车场\\\">停车场</option><option value=\\\"快递站\\\">快递站</option><option value=\\\"体育场\\\">体育场</option><option value=\\\"图书馆\\\">图书馆</option><option value=\\\"医院\\\">医院</option><option value=\\\"酒店\\\">酒店</option>\", 13);\nconst _hoisted_19 = {\n  key: 0\n};\nconst _hoisted_20 = {\n  key: 1,\n  class: \"search-results\"\n};\nconst _hoisted_21 = [\"onClick\"];\nconst _hoisted_22 = {\n  key: 2\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.goToDashboard && $setup.goToDashboard(...args))\n  }, \"返回首页\"), _createCommentVNode(\" 当前位置输入 \"), _createElementVNode(\"div\", null, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"currentLocation\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.currentLocation = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.currentLocation]])]), _createCommentVNode(\" 查询范围输入 \"), _createElementVNode(\"div\", null, [_hoisted_4, _createCommentVNode(\" 用户可以输入自定义距离 \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    id: \"searchRange\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $setup.searchRange = $event),\n    min: \"0\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.searchRange, void 0, {\n    number: true\n  }]])]), _createElementVNode(\"div\", null, [_createCommentVNode(\" 或者使用拖拽条选择距离范围 \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"range\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.searchRange = $event),\n    min: \"0\",\n    max: \"5000\",\n    step: \"10\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.searchRange, void 0, {\n    number: true\n  }]])]), _createCommentVNode(\" 场所种类选择 \"), _createElementVNode(\"div\", null, [_hoisted_5, _withDirectives(_createElementVNode(\"select\", {\n    id: \"placeType\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.placeType = $event)\n  }, [_hoisted_6, _createCommentVNode(\" 添加更多场所种类选项 \")], 512 /* NEED_PATCH */), [[_vModelSelect, $setup.placeType]])]), _createCommentVNode(\" 搜索按钮 \"), _createElementVNode(\"button\", {\n    onClick: _cache[5] || (_cache[5] = (...args) => $setup.search && $setup.search(...args))\n  }, \"查询\"), _createCommentVNode(\" 当前位置显示 \"), $setup.currentLocationName ? (_openBlock(), _createElementBlock(\"p\", _hoisted_19, \"当前位置: \" + _toDisplayString($setup.currentLocationName), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 搜索结果列表 \"), $setup.searchResults && $setup.searchResults.length ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_20, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.searchResults, result => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: result.id,\n      class: \"result-item\"\n    }, [_createElementVNode(\"p\", null, \"编号：\" + _toDisplayString(result.id), 1 /* TEXT */), _createElementVNode(\"p\", null, \"名称：\" + _toDisplayString(result.name), 1 /* TEXT */), _createElementVNode(\"p\", null, \"类型：\" + _toDisplayString(result.type), 1 /* TEXT */), _createElementVNode(\"p\", null, \"距离：\" + _toDisplayString(result.distance) + \" 米\", 1 /* TEXT */), _createCommentVNode(\" 添加“路线”按钮 \"), _createElementVNode(\"button\", {\n      onClick: $event => $setup.goToRoutePlanner(result.id)\n    }, \"路线\", 8 /* PROPS */, _hoisted_21)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : $setup.searchResults && !$setup.searchResults.length ? (_openBlock(), _createElementBlock(\"p\", _hoisted_22, \"没有找到相关场所\")) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementVNode","for","_createStaticVNode","key","_createElementBlock","_hoisted_1","_hoisted_2","onClick","_cache","args","$setup","goToDashboard","_createCommentVNode","_hoisted_3","type","id","$event","currentLocation","required","_hoisted_4","searchRange","min","number","max","step","_hoisted_5","placeType","_hoisted_6","search","currentLocationName","_hoisted_19","_toDisplayString","searchResults","length","_hoisted_20","_Fragment","_renderList","result","name","distance","goToRoutePlanner","_hoisted_21","_hoisted_22"],"sources":["D:\\Users\\SevenGrass\\Documents\\WILLIAMZHANG\\DataStrucCourseDes\\MyGithub\\src_all\\frontend\\src\\components\\PlaceQuery.vue"],"sourcesContent":["<!-- PlaceQuery.vue -->\r\n<template>\r\n    <div class=\"place-query\">\r\n        <h1>场所查询</h1>\r\n        <button @click=\"goToDashboard\">返回首页</button>\r\n        <!-- 当前位置输入 -->\r\n        <div>\r\n            <label for=\"currentLocation\">当前位置:</label>\r\n            <input type=\"text\" id=\"currentLocation\" v-model=\"currentLocation\" required>\r\n        </div>\r\n        <!-- 查询范围输入 -->\r\n        <div>\r\n            <label for=\"searchRange\">查询范围 (米):</label>\r\n            <!-- 用户可以输入自定义距离 -->\r\n            <input type=\"number\" id=\"searchRange\" v-model.number=\"searchRange\" min=\"0\" required>\r\n        </div>\r\n        <div>\r\n            <!-- 或者使用拖拽条选择距离范围 -->\r\n            <input type=\"range\" v-model.number=\"searchRange\" min=\"0\" max=\"5000\" step=\"10\">\r\n        </div>\r\n        <!-- 场所种类选择 -->\r\n        <div>\r\n            <label for=\"placeType\">场所种类:</label>\r\n            <select id=\"placeType\" v-model=\"placeType\">\r\n                <option value=\"all\">全部</option>\r\n                <option value=\"卫生间\">卫生间</option>\r\n                <option value=\"餐饮\">餐饮</option>\r\n                <option value=\"商店\">商店</option>\r\n                <option value=\"广播\">广播</option>\r\n                <option value=\"医务室\">医务室</option>\r\n                <option value=\"服务厅\">服务厅</option>\r\n                <option value=\"停车场\">停车场</option>\r\n                <option value=\"快递站\">快递站</option>\r\n                <option value=\"体育场\">体育场</option>\r\n                <option value=\"图书馆\">图书馆</option>\r\n                <option value=\"医院\">医院</option>\r\n                <option value=\"酒店\">酒店</option>\r\n                <!-- 添加更多场所种类选项 -->\r\n            </select>\r\n        </div>\r\n        <!-- 搜索按钮 -->\r\n        <button @click=\"search\">查询</button>\r\n        <!-- 当前位置显示 -->\r\n        <p v-if=\"currentLocationName\">当前位置: {{ currentLocationName }}</p>\r\n        <!-- 搜索结果列表 -->\r\n        <ul v-if=\"searchResults && searchResults.length\" class=\"search-results\">\r\n            <li v-for=\"result in searchResults\" :key=\"result.id\" class=\"result-item\">\r\n                <p>编号：{{ result.id }}</p>\r\n                <p>名称：{{ result.name }}</p>\r\n                <p>类型：{{ result.type }}</p>\r\n                <p>距离：{{ result.distance }} 米</p>\r\n                <!-- 添加“路线”按钮 -->\r\n                <button @click=\"goToRoutePlanner(result.id)\">路线</button>\r\n            </li>\r\n        </ul>\r\n        <p v-else-if=\"searchResults && !searchResults.length\">没有找到相关场所</p>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\nimport axios from 'axios';\r\nimport { useRouter } from 'vue-router';\r\n\r\nexport default {\r\n    name: 'PlaceQuery',\r\n    setup() {\r\n        const currentLocation = ref(''); // 当前位置\r\n        const currentLocationName = ref('');\r\n        const searchRange = ref(500); // 查询范围，默认200米\r\n        const placeType = ref('all'); // 场所种类\r\n        const searchResults = ref([]); // 搜索结果\r\n        const router = useRouter(); // vue-router\r\n\r\n        //解析后端返回的JSON数据\r\n        const parseSearchResults = (data) => {\r\n            return data.filter(line => line.trim() !== '').map(line => {\r\n                const parts = line.split(' '); // 根据空格分割每一行\r\n                return {\r\n                    id: parts[0],\r\n                    name: parts[1], // 类型\r\n                    type: parts[2], // 名称\r\n                    distance: parseInt(parts[3], 10), // 距离，转换为整数\r\n                };\r\n            });\r\n        };\r\n\r\n        // 搜索场所\r\n        const search = async () => {\r\n            try {\r\n                const response = await axios.post('/api/place-query', {\r\n                    currentLocation: currentLocation.value,\r\n                    searchRange: searchRange.value,\r\n                    placeType: placeType.value,\r\n                });\r\n                if (response.data.success) {\r\n                    const listString = response.data.list.split('\\n');\r\n                    searchResults.value = parseSearchResults(listString.slice(1)); // 假设后端返回的数据是数组格式\r\n                    currentLocationName.value = listString[0].trim();\r\n                }\r\n            } catch (err) {\r\n                console.error('Error searching places:', err);\r\n            }\r\n        };\r\n\r\n        // 跳转到首页\r\n        const goToDashboard = () => {\r\n            router.push('/dashboard');\r\n        };\r\n\r\n        // 新增跳转到路线规划的方法\r\n        const goToRoutePlanner = (endPointId) => {\r\n            // 假设当前位置编号存储在 currentLocation.value 中\r\n            const startPointId = currentLocation.value;\r\n            router.push({\r\n                path: '/route-planning',\r\n                query: {\r\n                    startPoint: startPointId,\r\n                    endPoint: endPointId\r\n                }\r\n            });\r\n        };\r\n\r\n        return {\r\n            currentLocation,\r\n            currentLocationName,\r\n            searchRange,\r\n            placeType,\r\n            searchResults,\r\n            search,\r\n            goToDashboard,\r\n            goToRoutePlanner,\r\n        };\r\n    },\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
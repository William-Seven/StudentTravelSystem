{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelSelect as _vModelSelect, renderList as _renderList, Fragment as _Fragment, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"place-query\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"场所查询\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"currentLocation\"\n}, \"当前位置:\", -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"searchRange\"\n}, \"查询范围 (米):\", -1 /* HOISTED */);\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"placeType\"\n}, \"场所种类:\", -1 /* HOISTED */);\nconst _hoisted_7 = /*#__PURE__*/_createStaticVNode(\"<option value=\\\"all\\\">全部</option><option value=\\\"卫生间\\\">卫生间</option><option value=\\\"餐饮\\\">餐饮</option><option value=\\\"商店\\\">商店</option><option value=\\\"广播\\\">广播</option><option value=\\\"医务室\\\">医务室</option><option value=\\\"服务厅\\\">服务厅</option><option value=\\\"停车场\\\">停车场</option><option value=\\\"快递站\\\">快递站</option><option value=\\\"体育场\\\">体育场</option><option value=\\\"图书馆\\\">图书馆</option><option value=\\\"医院\\\">医院</option><option value=\\\"酒店\\\">酒店</option>\", 13);\nconst _hoisted_20 = {\n  key: 1\n};\nconst _hoisted_21 = {\n  key: 2,\n  class: \"search-results\"\n};\nconst _hoisted_22 = [\"onClick\"];\nconst _hoisted_23 = {\n  key: 3\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $setup.goToDashboard && $setup.goToDashboard(...args))\n  }, \"返回首页\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $setup.toggleArea('scenic'))\n  }, \"景区\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $setup.toggleArea('campus'))\n  }, \"校园\"), $setup.area ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"h2\", null, _toDisplayString($setup.area === 'scenic' ? '景区场所' : '校园场所'), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 当前位置输入 \"), _createElementVNode(\"div\", null, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"currentLocation\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $setup.currentLocation = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.currentLocation]])]), _createCommentVNode(\" 查询范围输入 \"), _createElementVNode(\"div\", null, [_hoisted_5, _createCommentVNode(\" 用户可以输入自定义距离 \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    id: \"searchRange\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $setup.searchRange = $event),\n    min: \"0\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.searchRange, void 0, {\n    number: true\n  }]])]), _createElementVNode(\"div\", null, [_createCommentVNode(\" 或者使用拖拽条选择距离范围 \"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"range\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $setup.searchRange = $event),\n    min: \"0\",\n    max: \"5000\",\n    step: \"10\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.searchRange, void 0, {\n    number: true\n  }]])]), _createCommentVNode(\" 场所种类选择 \"), _createElementVNode(\"div\", null, [_hoisted_6, _withDirectives(_createElementVNode(\"select\", {\n    id: \"placeType\",\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $setup.placeType = $event)\n  }, [_hoisted_7, _createCommentVNode(\" 添加更多场所种类选项 \")], 512 /* NEED_PATCH */), [[_vModelSelect, $setup.placeType]])]), _createCommentVNode(\" 搜索按钮 \"), _createElementVNode(\"button\", {\n    onClick: _cache[7] || (_cache[7] = (...args) => $setup.search && $setup.search(...args))\n  }, \"查询\"), _createCommentVNode(\" 当前位置显示 \"), $setup.currentLocationName ? (_openBlock(), _createElementBlock(\"p\", _hoisted_20, \"当前位置: \" + _toDisplayString($setup.currentLocationName), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" 搜索结果列表 \"), $setup.searchResults && $setup.searchResults.length ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_21, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.searchResults, result => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: result.id,\n      class: \"result-item\"\n    }, [_createElementVNode(\"p\", null, \"编号：\" + _toDisplayString(result.id), 1 /* TEXT */), _createElementVNode(\"p\", null, \"名称：\" + _toDisplayString(result.name), 1 /* TEXT */), _createElementVNode(\"p\", null, \"类型：\" + _toDisplayString(result.type), 1 /* TEXT */), _createElementVNode(\"p\", null, \"距离：\" + _toDisplayString(result.distance) + \" 米\", 1 /* TEXT */), _createCommentVNode(\" 添加“路线”按钮 \"), _createElementVNode(\"button\", {\n      onClick: $event => $setup.goToRoutePlanner(result.id)\n    }, \"路线\", 8 /* PROPS */, _hoisted_22)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : $setup.searchResults && !$setup.searchResults.length ? (_openBlock(), _createElementBlock(\"p\", _hoisted_23, \"没有找到相关场所\")) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","for","_createStaticVNode","_createElementBlock","_hoisted_1","_hoisted_2","onClick","_cache","args","$setup","goToDashboard","$event","toggleArea","area","_hoisted_3","_toDisplayString","_createCommentVNode","_hoisted_4","type","id","currentLocation","required","_hoisted_5","searchRange","min","number","max","step","_hoisted_6","placeType","_hoisted_7","search","currentLocationName","_hoisted_20","searchResults","length","_hoisted_21","_Fragment","_renderList","result","name","distance","goToRoutePlanner","_hoisted_22","_hoisted_23"],"sources":["D:\\Users\\SevenGrass\\Documents\\WILLIAMZHANG\\DataStrucCourseDes\\MyGithub\\src_all\\frontend\\src\\components\\PlaceQuery.vue"],"sourcesContent":["<!-- PlaceQuery.vue -->\r\n<template>\r\n    <div class=\"place-query\">\r\n        <h1>场所查询</h1>\r\n        <button @click=\"goToDashboard\">返回首页</button>\r\n        <button @click=\"toggleArea('scenic')\">景区</button>\r\n        <button @click=\"toggleArea('campus')\">校园</button>\r\n        <div v-if=\"area\">\r\n            <h2>{{ area === 'scenic' ? '景区场所' : '校园场所' }}</h2>\r\n        </div>\r\n        <!-- 当前位置输入 -->\r\n        <div>\r\n            <label for=\"currentLocation\">当前位置:</label>\r\n            <input type=\"text\" id=\"currentLocation\" v-model=\"currentLocation\" required>\r\n        </div>\r\n        <!-- 查询范围输入 -->\r\n        <div>\r\n            <label for=\"searchRange\">查询范围 (米):</label>\r\n            <!-- 用户可以输入自定义距离 -->\r\n            <input type=\"number\" id=\"searchRange\" v-model.number=\"searchRange\" min=\"0\" required>\r\n        </div>\r\n        <div>\r\n            <!-- 或者使用拖拽条选择距离范围 -->\r\n            <input type=\"range\" v-model.number=\"searchRange\" min=\"0\" max=\"5000\" step=\"10\">\r\n        </div>\r\n        <!-- 场所种类选择 -->\r\n        <div>\r\n            <label for=\"placeType\">场所种类:</label>\r\n            <select id=\"placeType\" v-model=\"placeType\">\r\n                <option value=\"all\">全部</option>\r\n                <option value=\"卫生间\">卫生间</option>\r\n                <option value=\"餐饮\">餐饮</option>\r\n                <option value=\"商店\">商店</option>\r\n                <option value=\"广播\">广播</option>\r\n                <option value=\"医务室\">医务室</option>\r\n                <option value=\"服务厅\">服务厅</option>\r\n                <option value=\"停车场\">停车场</option>\r\n                <option value=\"快递站\">快递站</option>\r\n                <option value=\"体育场\">体育场</option>\r\n                <option value=\"图书馆\">图书馆</option>\r\n                <option value=\"医院\">医院</option>\r\n                <option value=\"酒店\">酒店</option>\r\n                <!-- 添加更多场所种类选项 -->\r\n            </select>\r\n        </div>\r\n        <!-- 搜索按钮 -->\r\n        <button @click=\"search\">查询</button>\r\n        <!-- 当前位置显示 -->\r\n        <p v-if=\"currentLocationName\">当前位置: {{ currentLocationName }}</p>\r\n        <!-- 搜索结果列表 -->\r\n        <ul v-if=\"searchResults && searchResults.length\" class=\"search-results\">\r\n            <li v-for=\"result in searchResults\" :key=\"result.id\" class=\"result-item\">\r\n                <p>编号：{{ result.id }}</p>\r\n                <p>名称：{{ result.name }}</p>\r\n                <p>类型：{{ result.type }}</p>\r\n                <p>距离：{{ result.distance }} 米</p>\r\n                <!-- 添加“路线”按钮 -->\r\n                <button @click=\"goToRoutePlanner(result.id)\">路线</button>\r\n            </li>\r\n        </ul>\r\n        <p v-else-if=\"searchResults && !searchResults.length\">没有找到相关场所</p>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\nimport axios from 'axios';\r\nimport { useRouter } from 'vue-router';\r\n\r\nexport default {\r\n    name: 'PlaceQuery',\r\n    setup() {\r\n        const currentLocation = ref(''); // 当前位置\r\n        const currentLocationName = ref('');\r\n        const searchRange = ref(500); // 查询范围，默认200米\r\n        const placeType = ref('all'); // 场所种类\r\n        const searchResults = ref([]); // 搜索结果\r\n        const area = ref('scenic'); \r\n        const router = useRouter(); // vue-router\r\n\r\n        //解析后端返回的JSON数据\r\n        const parseSearchResults = (data) => {\r\n            return data.filter(line => line.trim() !== '').map(line => {\r\n                const parts = line.split(' '); // 根据空格分割每一行\r\n                return {\r\n                    id: parts[0],\r\n                    name: parts[1], // 类型\r\n                    type: parts[2], // 名称\r\n                    distance: parseInt(parts[3], 10), // 距离，转换为整数\r\n                };\r\n            });\r\n        };\r\n\r\n        // 搜索场所\r\n        const search = async () => {\r\n            try {\r\n                const apiUrl = area.value === 'campus' ? '/api/place-querysc' : '/api/place-query';\r\n                const response = await axios.post(apiUrl, {\r\n                    currentLocation: currentLocation.value,\r\n                    searchRange: searchRange.value,\r\n                    placeType: placeType.value,\r\n                });\r\n                if (response.data.success) {\r\n                    const listString = response.data.list.split('\\n');\r\n                    searchResults.value = parseSearchResults(listString.slice(1)); // 假设后端返回的数据是数组格式\r\n                    currentLocationName.value = listString[0].trim();\r\n                }\r\n            } catch (err) {\r\n                console.error('Error searching places:', err);\r\n            }\r\n        };\r\n\r\n        const toggleArea = (newArea) => {\r\n            area.value = newArea;\r\n            // 可以在这里添加额外的逻辑，比如重置搜索结果\r\n        };\r\n\r\n        // 跳转到首页\r\n        const goToDashboard = () => {\r\n            router.push('/dashboard');\r\n        };\r\n\r\n        // 新增跳转到路线规划的方法\r\n        const goToRoutePlanner = (endPointId) => {\r\n            // 假设当前位置编号存储在 currentLocation.value 中\r\n            const startPointId = currentLocation.value;\r\n            router.push({\r\n                path: '/route-planning',\r\n                query: {\r\n                    startPoint: startPointId,\r\n                    endPoint: endPointId\r\n                }\r\n            });\r\n        };\r\n\r\n        return {\r\n            currentLocation,\r\n            currentLocationName,\r\n            searchRange,\r\n            placeType,\r\n            searchResults,\r\n            search,\r\n            goToDashboard,\r\n            goToRoutePlanner,\r\n            toggleArea,\r\n            area,\r\n        };\r\n    },\r\n};\r\n</script>"],"mappings":";;EAESA,KAAK,EAAC;AAAa;gCACpBC,mBAAA,CAAa,YAAT,MAAI;;EAHhBC,GAAA;AAAA;gCAYYD,mBAAA,CAA0C;EAAnCE,GAAG,EAAC;AAAiB,GAAC,OAAK;gCAKlCF,mBAAA,CAA0C;EAAnCE,GAAG,EAAC;AAAa,GAAC,WAAS;gCAUlCF,mBAAA,CAAoC;EAA7BE,GAAG,EAAC;AAAW,GAAC,OAAK;gCA3BxCC,kBAAA;;EAAAF,GAAA;AAAA;;EAAAA,GAAA;EAkDyDF,KAAK,EAAC;;oBAlD/D;;EAAAE,GAAA;AAAA;;uBAEIG,mBAAA,CA2DM,OA3DNC,UA2DM,GA1DFC,UAAa,EACbN,mBAAA,CAA4C;IAAnCO,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAC,aAAA,IAAAD,MAAA,CAAAC,aAAA,IAAAF,IAAA,CAAa;KAAE,MAAI,GACnCT,mBAAA,CAAiD;IAAxCO,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAI,MAAA,IAAEF,MAAA,CAAAG,UAAU;KAAY,IAAE,GACxCb,mBAAA,CAAiD;IAAxCO,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAI,MAAA,IAAEF,MAAA,CAAAG,UAAU;KAAY,IAAE,GAC7BH,MAAA,CAAAI,IAAI,I,cAAfV,mBAAA,CAEM,OATdW,UAAA,GAQYf,mBAAA,CAAkD,YAAAgB,gBAAA,CAA3CN,MAAA,CAAAI,IAAI,gD,KARvBG,mBAAA,gBAUQA,mBAAA,YAAe,EACfjB,mBAAA,CAGM,cAFFkB,UAA0C,E,gBAC1ClB,mBAAA,CAA2E;IAApEmB,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,iBAAiB;IAbnD,uBAAAZ,MAAA,QAAAA,MAAA,MAAAI,MAAA,IAa6DF,MAAA,CAAAW,eAAe,GAAAT,MAAA;IAAEU,QAAQ,EAAR;iDAAjBZ,MAAA,CAAAW,eAAe,E,KAEpEJ,mBAAA,YAAe,EACfjB,mBAAA,CAIM,cAHFuB,UAA0C,EAC1CN,mBAAA,iBAAoB,E,gBACpBjB,mBAAA,CAAoF;IAA7EmB,IAAI,EAAC,QAAQ;IAACC,EAAE,EAAC,aAAa;IAnBjD,uBAAAZ,MAAA,QAAAA,MAAA,MAAAI,MAAA,IAmBkEF,MAAA,CAAAc,WAAW,GAAAZ,MAAA;IAAEa,GAAG,EAAC,GAAG;IAACH,QAAQ,EAAR;iDAArBZ,MAAA,CAAAc,WAAW,E;IAnB7EE,MAAA,EAmBkD;EAA4B,E,MAEtE1B,mBAAA,CAGM,cAFFiB,mBAAA,mBAAsB,E,gBACtBjB,mBAAA,CAA8E;IAAvEmB,IAAI,EAAC,OAAO;IAvB/B,uBAAAX,MAAA,QAAAA,MAAA,MAAAI,MAAA,IAuBgDF,MAAA,CAAAc,WAAW,GAAAZ,MAAA;IAAEa,GAAG,EAAC,GAAG;IAACE,GAAG,EAAC,MAAM;IAACC,IAAI,EAAC;iDAArClB,MAAA,CAAAc,WAAW,E;IAvB3DE,MAAA,EAuBgC;EAA4B,E,MAEpDT,mBAAA,YAAe,EACfjB,mBAAA,CAkBM,cAjBF6B,UAAoC,E,gBACpC7B,mBAAA,CAeS;IAfDoB,EAAE,EAAC,WAAW;IA5BlC,uBAAAZ,MAAA,QAAAA,MAAA,MAAAI,MAAA,IA4B4CF,MAAA,CAAAoB,SAAS,GAAAlB,MAAA;MACrCmB,UAA+B,EAa/Bd,mBAAA,gBAAmB,C,0CAdSP,MAAA,CAAAoB,SAAS,E,KAiB7Cb,mBAAA,UAAa,EACbjB,mBAAA,CAAmC;IAA1BO,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,MAAA,CAAAsB,MAAA,IAAAtB,MAAA,CAAAsB,MAAA,IAAAvB,IAAA,CAAM;KAAE,IAAE,GAC1BQ,mBAAA,YAAe,EACNP,MAAA,CAAAuB,mBAAmB,I,cAA5B7B,mBAAA,CAAiE,KAhDzE8B,WAAA,EAgDsC,QAAM,GAAAlB,gBAAA,CAAGN,MAAA,CAAAuB,mBAAmB,oBAhDlEhB,mBAAA,gBAiDQA,mBAAA,YAAe,EACLP,MAAA,CAAAyB,aAAa,IAAIzB,MAAA,CAAAyB,aAAa,CAACC,MAAM,I,cAA/ChC,mBAAA,CASK,MATLiC,WASK,I,kBARDjC,mBAAA,CAOKkC,SAAA,QA1DjBC,WAAA,CAmDiC7B,MAAA,CAAAyB,aAAa,EAAvBK,MAAM;yBAAjBpC,mBAAA,CAOK;MAPgCH,GAAG,EAAEuC,MAAM,CAACpB,EAAE;MAAErB,KAAK,EAAC;QACvDC,mBAAA,CAAyB,WAAtB,KAAG,GAAAgB,gBAAA,CAAGwB,MAAM,CAACpB,EAAE,kBAClBpB,mBAAA,CAA2B,WAAxB,KAAG,GAAAgB,gBAAA,CAAGwB,MAAM,CAACC,IAAI,kBACpBzC,mBAAA,CAA2B,WAAxB,KAAG,GAAAgB,gBAAA,CAAGwB,MAAM,CAACrB,IAAI,kBACpBnB,mBAAA,CAAiC,WAA9B,KAAG,GAAAgB,gBAAA,CAAGwB,MAAM,CAACE,QAAQ,IAAG,IAAE,iBAC7BzB,mBAAA,cAAiB,EACjBjB,mBAAA,CAAwD;MAA/CO,OAAK,EAAAK,MAAA,IAAEF,MAAA,CAAAiC,gBAAgB,CAACH,MAAM,CAACpB,EAAE;OAAG,IAAE,iBAzD/DwB,WAAA,E;sCA4DsBlC,MAAA,CAAAyB,aAAa,KAAKzB,MAAA,CAAAyB,aAAa,CAACC,MAAM,I,cAApDhC,mBAAA,CAAkE,KA5D1EyC,WAAA,EA4D8D,UAAQ,KA5DtE5B,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}